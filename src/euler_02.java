import java.util.ArrayList;
import java.util.List;


public class euler_02 {

	/**
	 * ProjectEuler.net - Problem #02
	 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
	 * By starting with 1 and 2, the first 10 terms will be:
	 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
	 * By considering the terms in the Fibonacci sequence whose values do not exceed four 
	 * million, find the sum of the even-valued terms.
	 */
	public static void main(String[] args) {
		
		// Can't use an array because they are fixed length
		// Need to use an integer list in order to build it dynamically
		List<Integer> fib = new ArrayList<Integer>();
			
		// Variable to track the sum of the even-valued sequence numbers
		int evenSum = 0;

		// Add the first two numbers to the sequence/
		fib.add(0);
		fib.add(1);
		
		// Loop through the next group of numbers
		for(int i=2; i<=35; i++)
		{
			// Next fibonacci number = previous + one before previous
			fib.add(fib.get(i-1) + fib.get(i-2));
			
			// Determine if the current number is less than 4,000,000
			if(fib.get(i) < 4000000)
			{
				// If less than 4,000,000 then add up the even values
				if(fib.get(i)%2 == 0)
				{
					evenSum = evenSum + fib.get(i);
				} 
				
			} else
			{
				break;
			} // close IF loop
		} // close FOR loop

		System.out.println("The sum of the even-valued terms below 4,000,000 is: " + evenSum);

			
		} // close MAIN
		
		
	} // close CLASS
