//import java.util.ArrayList;
//import java.util.List;


public class euler_12 {

	@SuppressWarnings("unused")
	private static int m;

	/**
	 * ProjectEuler.net - Problem #12
	 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 
	 * 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
	 * 
	 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
	 * 
	 * Let us list the factors of the first seven triangle numbers:
	 *  1: 1
	 *  3: 1,3
	 *  6: 1,2,3,6
	 *  10: 1,2,5,10
	 *  15: 1,3,5,15
	 *  21: 1,3,7,21
	 *  28: 1,2,4,7,14,28
	 *  
	 *  We can see that 28 is the first triangle number to have over five divisors.
	 *  What is the value of the first triangle number to have over five hundred divisors?
	 */
	public static void main(String[] args) {
		
		int triSum = 0;
		int countFactors = 0;
		
		// step 1 - calculate the first n triangle numbers
		for(int i=1;countFactors < 501;i++)
		{
			countFactors = 0;
			triSum = triSum + i;
			//System.out.println(triSum);
		
			long k=(int) Math.sqrt(triSum);	
			for(int j=1;j<k+1;j++)
			{
				if(checkFactor(triSum,j))
				{
					
					// add 2 because we only check up to the square root (thus, we count each instance as a pair)
					countFactors = countFactors + 2;
					
					if(countFactors > 500)
					{
						System.out.println("Found a triangle number with > 500 divisors at " + triSum);
						break;
					}
				}
				
				
			} // close j FOR loop
		
		} // close i FOR loop
		
	} // close MAIN

	
	// helper functions
	static boolean checkPrime(int checkMe) {
		
		// only need to check factors < the square root of supposed prime number, plus 1
		long k=(int) Math.sqrt(checkMe);
		k = k+1;
		
		for(int j=2;j<k;j++)
		{
			if(checkMe%j == 0)
			{
				return false;
			} 
		} // close FOR
		
			return true;

	} // close checkPrime
	
	static boolean checkFactor(int bigNum, int possFactor ) {
		
		if(bigNum%possFactor == 0)
		{
			return true;
		}
		
		return false;
		
	} // close checkFactor
		
} // close CLASS
